// Code generated by hero.
// source: D:\GoProjects\af_dp_clean_core\graph\plugin\extgen\template\model_ext.tpl
// DO NOT EDIT!
package template

import (
	"bytes"

	"github.com/99designs/gqlgen/codegen"
	"github.com/gobeam/stringy"
)

type ModelExtOption struct {
	PackageName   string
	HasCreateTime bool
	HasUpdateTime bool
}

func ModelExt(object *codegen.Object, options ModelExtOption, buffer *bytes.Buffer) {
	buffer.WriteString(`
package `)
	buffer.WriteString(options.PackageName)
	buffer.WriteString(`

import (
	misc "github.com/anden007/af_dp_clean_core/misc"
	base "github.com/anden007/af_dp_clean_core/pkg/base"
	"reflect"
	"strings"
`)
	if options.HasCreateTime || options.HasUpdateTime {
		buffer.WriteString(`
	"time"
`)
	}
	buffer.WriteString(`
	"gorm.io/gorm"
)

func (`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`) TableName() string {
	return "t_`)
	buffer.WriteString(stringy.New(object.Name).SnakeCase().ToLower())
	buffer.WriteString(`"
}

func (`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`) ModelName() string {
	return "`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`" // 请修改表名，将在数据日志中使用
}

// BeforeCreate gorm钩子，在创建对象之前执行，可用于默认值初始化（正常默认值建议用default关键字）
func (m *`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`) BeforeCreate(tx *gorm.DB) (err error) {
	// 默认生成Id
	if strings.TrimSpace(m.ID) == "" {
		m.ID = misc.NewHexId()
	}
	`)
	if options.HasCreateTime {
		buffer.WriteString(`
	// 初始化CreateTime
	if m.CreateTime.IsZero() {
		m.CreateTime = time.Now()
	}`)
	}
	buffer.WriteString(`
	return
}

// BeforeUpdate gorm钩子,在修改对象之前执行,可用于默认值初始化(正常默认值建议用default关键字)
func (m *`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`) BeforeUpdate(tx *gorm.DB) (err error) {
	`)
	if options.HasUpdateTime {
		buffer.WriteString(`
	// 自动变更UpdateTime字段初始值
	m.UpdateTime = time.Now()`)
	}
	buffer.WriteString(`
	return
}

type I`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`Repository interface {
	base.ICRUDRepository[`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`]
}

type I`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`Usecase interface {
	base.ICRUDUsecase[`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`]
}

func init() {
	entity := `)
	buffer.WriteString(object.Name)
	buffer.WriteString(`{}
	tableName := entity.TableName()
	DomainModels["`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`"] = reflect.TypeOf((*`)
	buffer.WriteString(object.Name)
	buffer.WriteString(`)(nil)).Elem()
	if fields, err := misc.GetModelDBFieldNames(entity); err == nil {
		ModelDBFields[tableName] = make(map[string]string)
		for fieldName, field := range fields {
			ModelDBFields[tableName][fieldName] = field.DBFieldName
		}
	} else {
		panic(err)
	}
}
`)

}
